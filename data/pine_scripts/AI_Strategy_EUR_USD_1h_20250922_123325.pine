//@version=5
strategy("AI_Strategy_EUR_USD_1h", 
         shorttitle="EUR/USD_1h", 
         overlay=true,
         initial_capital=10000.0,
         default_qty_type=strategy.percent_of_equity,
         default_qty_value=10.0,
         commission_type=strategy.commission.percent,
         commission_value=0.1)

// 🧩 AI-Enhanced Trading Strategy
// Generated by: KI-Enhanced Pine Script Generator (Baustein C1)
// Strategy ID: strategy_1_1_EUR/USD_1h
// Symbol: EUR/USD
// Timeframe: 1h
// Generated: 2025-09-22 12:33:25
//
// 📊 AI Performance Metrics:
// Signal Confidence: 70.0%
// Risk/Reward Score: 0.650
// Opportunity Score: 60.0%
// Fusion Confidence: 68.0%
// Composite Score: 0.600
// Weighted Score: 0.620
//
// 📈 Expected Performance:
// Expected Return: 9.0%
// Expected Risk: 10.8%
// Expected Sharpe: 1.50

// 🎛️ Input Parameters
// AI Configuration
ai_confidence_threshold = input.float(0.6, "AI Confidence Threshold", minval=0.0, maxval=1.0, step=0.01, group="AI Settings")
use_multimodal_confirmation = input.bool(true, "Use Multimodal Confirmation", group="AI Settings")

// Risk Management
stop_loss_atr_mult = input.float(2.0, "Stop Loss ATR Multiplier", minval=0.5, maxval=5.0, step=0.1, group="Risk Management")
take_profit_atr_mult = input.float(3.0, "Take Profit ATR Multiplier", minval=1.0, maxval=10.0, step=0.1, group="Risk Management")
max_risk_per_trade = input.float(2.0, "Max Risk Per Trade (%)", minval=0.5, maxval=10.0, step=0.1, group="Risk Management") / 100

// Technical Indicators
rsi_length = input.int(14, "RSI Length", minval=5, maxval=50, group="Technical Indicators")
ema_fast = input.int(12, "EMA Fast", minval=5, maxval=50, group="Technical Indicators")
ema_slow = input.int(26, "EMA Slow", minval=20, maxval=100, group="Technical Indicators")
atr_length = input.int(14, "ATR Length", minval=5, maxval=50, group="Technical Indicators")

// Strategy Settings
enable_long = input.bool(true, "Enable Long Trades", group="Strategy Settings")
enable_short = input.bool(true, "Enable Short Trades", group="Strategy Settings")

// 📊 Technical Indicators
// Moving Averages
ema_fast_val = ta.ema(close, ema_fast)
ema_slow_val = ta.ema(close, ema_slow)

// RSI
rsi_val = ta.rsi(close, rsi_length)

// ATR for Risk Management
atr_val = ta.atr(atr_length)

// Bollinger Bands
bb_length = 20
bb_mult = 2.0
bb_basis = ta.sma(close, bb_length)
bb_dev = bb_mult * ta.stdev(close, bb_length)
bb_upper = bb_basis + bb_dev
bb_lower = bb_basis - bb_dev

// MACD
[macd_line, signal_line, hist] = ta.macd(close, 12, 26, 9)

// 🧠 AI-Enhanced Indicators
// Multimodal Confidence Score (simulated based on technical confluence)
technical_confluence = 0.0
technical_confluence := (rsi_val > 30 and rsi_val < 70) ? technical_confluence + 0.2 : technical_confluence
technical_confluence := (close > ema_fast_val and ema_fast_val > ema_slow_val) ? technical_confluence + 0.3 : technical_confluence
technical_confluence := (macd_line > signal_line) ? technical_confluence + 0.2 : technical_confluence
technical_confluence := (close > bb_basis) ? technical_confluence + 0.15 : technical_confluence
technical_confluence := (hist > hist[1]) ? technical_confluence + 0.15 : technical_confluence

// AI Confidence Score (based on strategy performance metrics)
ai_confidence_score = 0.700
multimodal_confidence = 0.680

// Combined AI Signal Strength
combined_ai_signal = (ai_confidence_score + multimodal_confidence + technical_confluence) / 3.0

// 🎯 AI-Enhanced Strategy Logic
// Entry Conditions
long_condition = false
short_condition = false

// AI-Based Entry Signals
if use_multimodal_confirmation
    // Multimodal AI Entry Logic
    long_condition := enable_long and 
                     combined_ai_signal > ai_confidence_threshold and
                     close > ema_fast_val and 
                     ema_fast_val > ema_slow_val and
                     rsi_val > 40 and rsi_val < 80 and
                     macd_line > signal_line and
                     close > bb_basis
    
    short_condition := enable_short and 
                      combined_ai_signal > ai_confidence_threshold and
                      close < ema_fast_val and 
                      ema_fast_val < ema_slow_val and
                      rsi_val < 60 and rsi_val > 20 and
                      macd_line < signal_line and
                      close < bb_basis
else
    // Standard AI Entry Logic
    long_condition := enable_long and 
                     ai_confidence_score > ai_confidence_threshold and
                     close > ema_fast_val and 
                     ema_fast_val > ema_slow_val and
                     rsi_val > 50
    
    short_condition := enable_short and 
                      ai_confidence_score > ai_confidence_threshold and
                      close < ema_fast_val and 
                      ema_fast_val < ema_slow_val and
                      rsi_val < 50

// 📈 Position Sizing based on AI Confidence
// Higher confidence = larger position size (within risk limits)
confidence_multiplier = math.min(combined_ai_signal * 1.5, 2.0)  // Max 2x multiplier
position_size = strategy.equity * max_risk_per_trade * confidence_multiplier / (stop_loss_atr_mult * atr_val)

// Execute Trades
if long_condition and strategy.position_size == 0
    strategy.entry("AI_Long", strategy.long, qty=position_size)
    
if short_condition and strategy.position_size == 0
    strategy.entry("AI_Short", strategy.short, qty=position_size)

// 🛡️ AI-Enhanced Risk Management
// Dynamic Stop Loss and Take Profit based on ATR and AI Confidence
if strategy.position_size > 0  // Long Position
    stop_loss_long = strategy.position_avg_price - (stop_loss_atr_mult * atr_val)
    take_profit_long = strategy.position_avg_price + (take_profit_atr_mult * atr_val)
    
    // AI-Enhanced Exit: Reduce confidence threshold for exits
    ai_exit_threshold = ai_confidence_threshold * 0.7
    
    strategy.exit("AI_Long_Exit", "AI_Long", 
                  stop=stop_loss_long, 
                  limit=take_profit_long)
    
    // Early exit if AI confidence drops significantly
    if combined_ai_signal < ai_exit_threshold
        strategy.close("AI_Long", comment="AI Confidence Drop")

if strategy.position_size < 0  // Short Position
    stop_loss_short = strategy.position_avg_price + (stop_loss_atr_mult * atr_val)
    take_profit_short = strategy.position_avg_price - (take_profit_atr_mult * atr_val)
    
    // AI-Enhanced Exit: Reduce confidence threshold for exits
    ai_exit_threshold = ai_confidence_threshold * 0.7
    
    strategy.exit("AI_Short_Exit", "AI_Short", 
                  stop=stop_loss_short, 
                  limit=take_profit_short)
    
    // Early exit if AI confidence drops significantly
    if combined_ai_signal < ai_exit_threshold
        strategy.close("AI_Short", comment="AI Confidence Drop")

// Emergency Risk Management
// Close all positions if drawdown exceeds threshold
max_drawdown_threshold = 0.10  // 10%
current_drawdown = (strategy.max_equity - strategy.equity) / strategy.max_equity

if current_drawdown > max_drawdown_threshold
    strategy.close_all(comment="Emergency Drawdown Protection")

// 🔔 AI-Enhanced Alerts
// Entry Alerts
if long_condition and strategy.position_size == 0
    alert("AI Long Entry Signal\n" + 
          "Symbol: EUR/USD\n" +
          "Confidence: " + str.tostring(combined_ai_signal, "#.###") + "\n" +
          "Price: " + str.tostring(close, "#.#####"), 
          alert.freq_once_per_bar)

if short_condition and strategy.position_size == 0
    alert("AI Short Entry Signal\n" + 
          "Symbol: EUR/USD\n" +
          "Confidence: " + str.tostring(combined_ai_signal, "#.###") + "\n" +
          "Price: " + str.tostring(close, "#.#####"), 
          alert.freq_once_per_bar)

// Risk Management Alerts
if current_drawdown > max_drawdown_threshold * 0.8  // 80% of max drawdown
    alert("Risk Warning: High Drawdown\n" + 
          "Current Drawdown: " + str.tostring(current_drawdown * 100, "#.##") + "%\n" +
          "Threshold: " + str.tostring(max_drawdown_threshold * 100, "#.##") + "%", 
          alert.freq_once_per_bar)

// 📊 AI-Enhanced Plotting
// Moving Averages
plot(ema_fast_val, "EMA Fast", color=color.blue, linewidth=1)
plot(ema_slow_val, "EMA Slow", color=color.red, linewidth=1)

// Bollinger Bands
p1 = plot(bb_upper, "BB Upper", color=color.gray, linewidth=1)
p2 = plot(bb_lower, "BB Lower", color=color.gray, linewidth=1)
fill(p1, p2, color=color.new(color.gray, 95), title="BB Background")

// AI Confidence Indicator
hline(0.5, "AI Confidence Mid", color=color.gray, linestyle=hline.style_dashed)
plot(combined_ai_signal, "AI Signal Strength", color=color.purple, linewidth=2, display=display.data_window)
plot(ai_confidence_threshold, "AI Threshold", color=color.orange, linewidth=1, display=display.data_window)

// Entry/Exit Markers
plotshape(long_condition and strategy.position_size == 0, "Long Entry", 
          shape.triangleup, location.belowbar, color.green, size=size.small)
plotshape(short_condition and strategy.position_size == 0, "Short Entry", 
          shape.triangledown, location.abovebar, color.red, size=size.small)

// AI Confidence Background
bgcolor(combined_ai_signal > ai_confidence_threshold ? color.new(color.green, 95) : 
        combined_ai_signal < ai_confidence_threshold * 0.7 ? color.new(color.red, 95) : na, 
        title="AI Confidence Background")

// Performance Info Table
if barstate.islast
    var table info_table = table.new(position.top_right, 2, 8, bgcolor=color.white, border_width=1)
    table.cell(info_table, 0, 0, "AI Strategy Info", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 0, "AI_Strategy_EUR_USD_1h", text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 1, "Signal Confidence", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 1, "70.0%", text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 2, "Expected Return", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 2, "9.0%", text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 3, "Expected Risk", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 3, "10.8%", text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 4, "Composite Score", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 4, "0.600", text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 5, "Current AI Signal", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 5, str.tostring(combined_ai_signal, "#.###"), text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 6, "Position Size", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 6, str.tostring(strategy.position_size, "#.##"), text_color=color.black, text_size=size.small)
    table.cell(info_table, 0, 7, "P&L", text_color=color.black, text_size=size.small)
    table.cell(info_table, 1, 7, str.tostring(strategy.netprofit, "#.##"), 
               text_color=strategy.netprofit >= 0 ? color.green : color.red, text_size=size.small)