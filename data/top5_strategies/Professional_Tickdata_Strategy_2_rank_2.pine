// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© AI-Indicator-Optimizer

//@version=5
strategy("Professional_Tickdata_Strategy_2", overlay=true, margin_long=100, margin_short=100)

// Strategy Parameters
signal_confidence_threshold = input.float(0.79, "Signal Confidence Threshold", minval=0.0, maxval=1.0)
risk_reward_ratio = input.float(2.1, "Risk Reward Ratio", minval=1.0, maxval=5.0)
stop_loss_pct = input.float(2.0, "Stop Loss %", minval=0.5, maxval=10.0) / 100
take_profit_pct = stop_loss_pct * risk_reward_ratio

// Technical Indicators
rsi = ta.rsi(close, 14)
[macd_line, signal_line, _] = ta.macd(close, 12, 26, 9)
bb_upper = ta.bb(close, 20, 2)[0]
bb_lower = ta.bb(close, 20, 2)[2]

// Entry Conditions
long_condition = rsi < 30 and macd_line > signal_line and close < bb_lower
short_condition = rsi > 70 and macd_line < signal_line and close > bb_upper

// Strategy Execution
if long_condition
    strategy.entry("Long", strategy.long)
    strategy.exit("Long Exit", "Long", stop=close * (1 - stop_loss_pct), limit=close * (1 + take_profit_pct))

if short_condition
    strategy.entry("Short", strategy.short)
    strategy.exit("Short Exit", "Short", stop=close * (1 + stop_loss_pct), limit=close * (1 - take_profit_pct))

// Plotting
plot(bb_upper, "BB Upper", color=color.blue)
plot(bb_lower, "BB Lower", color=color.blue)
plotshape(long_condition, "Long Signal", shape.triangleup, location.belowbar, color.green, size=size.small)
plotshape(short_condition, "Short Signal", shape.triangledown, location.abovebar, color.red, size=size.small)
